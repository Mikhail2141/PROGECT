import asyncio
import datetime
import time
import gspread
import logging
from aiogram.filters.state import State,StatesGroup
from aiogram import types, Router, Dispatcher
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from trans import translations
from keyboards.inline import (start_menu, back, buy ,dostavka, meneger,PVZ ,
                              back_buy ,  cheque , F_menu , complete , yes , No)
from google.oauth2 import service_account
from googleapiclient.discovery import build
import re



dp = Dispatcher()
class Form(StatesGroup):
    courier_address = State()
    done = State()


logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)
# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä
router = Router()
ID  = ['1016060761']

SCOPES = ['https://www.googleapis.com/auth/spreadsheets']
SPREADSHEET_ID = '1qhdn1BPOF0S22TsrcuDuzvPUY3RHV0IQsPwPaPwW8dE'
SERVICE_ACCOUNT_FILE = 'C:/Users/jak/PycharmProjects/pythonProject/botTech/handlers/table.json'



input_article = None # –û–±—ä—è–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—Ä—Ç–∏–∫—É–ª–∞ —Ç–æ–≤–∞—Ä–∞
input_addres = None # –û–±—ä—è–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏

async def send_message_with_keyboard(call, text, keyboard):
    await call.message.answer(text=text, reply_markup=keyboard)
    await call.answer()


@router.callback_query(lambda call: call.data == "help")
async def help_command(call: types.CallbackQuery):
    lang_code = call.from_user.id
    help_text = translations[lang_code]["help_text"]

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=translations[lang_code]["start"], callback_data="link")
        ],
        [
            InlineKeyboardButton(text=translations[lang_code]["back_to_menu"], callback_data="back_to_main_menu")
        ]
    ])
    image_url = "*"
    await call.message.answer_photo(photo=image_url, caption=f"{help_text}\n\n",
                                    reply_markup=keyboard)

@router.callback_query(lambda call: call.data == "start_menu")
async def start_menu_chat(call: types.CallbackQuery):

    lang_code = call.from_user.id

    await send_message_with_keyboard(call,
                                          f"\n{translations["chat"]["start"]}\n",
                                          start_menu())


#–ö–Ω–æ–ø–∫–∞ FAQ
@router.callback_query(lambda call: call.data == "faq")
async def faq(call: types.CallbackQuery):
    lang_code = call.from_user.id
    await call.message.delete()
    await send_message_with_keyboard(call,
                                     f"\n{translations["chat"]['F_tolk']}\n", F_menu())


@router.callback_query(lambda call: call.data.startswith("DB"))
async def DB_reply(call: types.CallbackQuery):
    lang_code = call.from_user.id
    await call.bot.send_message(
        chat_id=call.message.chat.id,
        text=f"{translations['chat']['faq_DB']}",
        reply_markup=back()
    )



@router.callback_query(lambda call: call.data.startswith("VO"))
async def VO_reply(call: types.CallbackQuery):
    lang_code = call.from_user.id
    await call.bot.send_message(
        chat_id=call.message.chat.id,
        text=f"{translations['chat']['faq_VO']}",
        reply_markup=back()
    )
@router.callback_query(lambda call: call.data.startswith("K"))
async def K_reply(call: types.CallbackQuery):
    lang_code = call.from_user.id
    await call.bot.send_message(
        chat_id=call.message.chat.id,
        text=f"{translations['chat']['faq_K']}",
        reply_markup=back()
    )

@router.callback_query(lambda call: call.data.startswith("RK"))
async def RK_reply(call: types.CallbackQuery):
    lang_code = call.from_user.id
    await call.bot.send_message(
        chat_id=call.message.chat.id,
        text=f"{translations['chat']['faq_RK']}",
        reply_markup=back()
    )



#–ö–Ω–æ–ø–∫–∞ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
@router.callback_query(lambda call: call.data == "ask")
async def ask_reply(call: types.CallbackQuery):
    lang_code = call.from_user.id
    await call.message.delete()
    await send_message_with_keyboard(call,
                                     f"\n{translations["chat"]['question']}\n", meneger())



@router.callback_query(lambda call: call.data.startswith("artikul"))
async def artikul_reply(call: types.CallbackQuery):

    lang_code = call.from_user.id

    await call.bot.send_message(
        chat_id=call.message.chat.id,
        text=f"{translations['chat']['send_artikul']}",
        reply_markup=back()
    )

pattern = r'^\d{3}$'


@router.message(lambda msg: re.search(pattern, msg.text) is not None)
async def process(msg: types.Message):
    global input_article  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    lang_code = msg.from_user.id
    input_article = msg.text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    if re.search(pattern, msg.text):
        product_info = get_product_info(input_article)
        if product_info:
            text = f"–§–æ—Ç–æ: {product_info['photo']}\n–ù–∞–∑–≤–∞–Ω–∏–µ: {product_info['name']}\n–¶–µ–Ω–∞: {product_info['price']} —Ä—É–±."
            await msg.answer(text=text, reply_markup=buy())
        else:
            text_ = "–ê—Ä—Ç–∏–∫—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
            await msg.answer(text=text_)
    else:
        await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª.")

def get_product_info(article):
    logger.debug(f"–ü–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª: {article}")
    credentials = service_account.Credentials.from_service_account_file(
        SERVICE_ACCOUNT_FILE, scopes=SCOPES)
    service = build('sheets', 'v4', credentials=credentials)
    sheet = service.spreadsheets()

    range_name = f'–õ–∏—Å—Ç1!A:D'
    result = sheet.values().get(spreadsheetId=SPREADSHEET_ID, range=range_name).execute()
    values = result.get('values', [])
    if not values:
        return None
    article_column = 2  # –¢—Ä–µ—Ç—å—è –∫–æ–ª–æ–Ω–∫–∞ (–∏–Ω–¥–µ–∫—Å 2)
    for row in values[1:]:  # –ù–∞—á–∏–Ω–∞–µ–º —Å –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–∏ (–∑–∞–≥–æ–ª–æ–≤–∫–∏)
        if str(row[article_column]) == article:
            return {
                'photo': row[0],  # –§–æ—Ç–æ –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ
                'name': row[1],
                'article': row[article_column],
                'price': float(row[3])
            }

    return None

pat = r'^^[–ê-–Ø].{1,}$'
@router.message(lambda msg: re.search(pat, msg.text) is not None)
async def process_address(msg: types.Message):
    global input_addres
    lang_code = msg.from_user.id
    input_addres = msg.text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    if re.search(pat, msg.text):
        await msg.answer(text=f"–ü–æ–ª—É—á–µ–Ω –∞–¥—Ä–µ—Å: {input_addres}")
        await msg.answer(text="–ù–∞–∂–º–∏ —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫!", reply_markup=cheque())
    else:
        await msg.answer(text="–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!")

@router.callback_query(lambda call: call.data.startswith("Buy"))
async def artikul_reply(call: types.CallbackQuery):
    lang_code = call.from_user.id

    await call.bot.send_message(
        chat_id=call.message.chat.id,
        text=f"{translations['chat']['Buy_tovar']}",
        reply_markup=dostavka()
    )


@router.callback_query(lambda call: call.data.startswith("courier"))
async def artikul_reply(call: types.CallbackQuery):
    lang_code = call.from_user.id

    await call.bot.send_message(
        chat_id = call.message.chat.id,
        text = f"{translations['chat']['courier_']}",
        reply_markup = back_buy()
    )



@router.callback_query(lambda call: call.data.startswith("pvz"))
async def artikul_reply(call: types.CallbackQuery):
    lang_code = call.from_user.id
    await call.bot.send_message(
        chat_id=call.message.chat.id,
        text=f"{translations['chat']['pvz_']}",
        reply_markup=PVZ()
    )


@router.callback_query(lambda call: call.data.startswith("chek"))
async def generate_cheque(call: types.CallbackQuery):
    lang_code = call.from_user.id
    product_info = get_product_info(input_article)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é



    if product_info:
        cheque_text = f"""
üéÅ –í–∞—à —á–µ–∫!

üìÖ –î–∞—Ç–∞: {datetime.datetime.now().strftime("%d.%m.%Y %H:%M"):<30}

üõ†Ô∏è –¢–æ–≤–∞—Ä: {product_info['name']:<40}
üîç –ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞: {input_article:<20}
üí∞ –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞: {product_info['price']:.2f} —Ä—É–±.:<20

üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {input_addres}

    üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ú—ã —Ü–µ–Ω–∏–º –≤–∞—à –≤—ã–±–æ—Ä! üôå
    """

    await call.bot.send_message(
        chat_id=call.message.chat.id,
        text=f"{translations['chat']["you_chek"]}"
    )
    time.sleep(1)
    await call.bot.send_message(
        chat_id=call.message.chat.id,
        text=cheque_text,
    )

    await call.bot.send_message(
        chat_id = "5024738320",
        text= cheque_text,
    )

    await call.bot.send_message(
        chat_id = call.message.chat.id,
        text= f"{translations['chat']['complete']}",
        reply_markup=complete()
    )



@router.callback_query(lambda call: call.data.startswith("yes"))
async def yes_reply(call: types.CallbackQuery):
    lang_code = call.from_user.id
    await call.bot.send_message(
        chat_id=call.message.chat.id,
        text=f"{translations['chat']['yes']}",
    )

    await call.bot.send_message(
        chat_id=call.message.chat.id,
        text=f"{translations['chat']['sms']}",
        reply_markup= yes()
    )


@router.callback_query(lambda call: call.data.startswith("No"))
async def yes_reply(call: types.CallbackQuery):
    lang_code = call.from_user.id
    await call.bot.send_message(
        chat_id=call.message.chat.id,
        text=f"{translations['chat']['Exit']}",
        reply_markup= No()
    )



